#!/bin/bash
# rejects commits of UTF-8 text files. 
# copy this file to .git/hooks

#set -e  # Abort on Errors
#set -x  # show commands

# You should have an ENV-Variable LINUX_WCS_DIR=/home/developer/Desktop/WCS/
if [ -z $LINUX_WCS_DIR ]; then
   echo "You should have an ENV-Variable \"export LINUX_WCS_DIR=/home/developer/Desktop/WCS/\" (points to an Amiga-WCS Installationi Dir. Will be copied into AROS.)"
   echo "Commit refused."
   exit 1
fi

# You should have an ENV-Variable AROS_ALT_ABI_V0=~/Desktop/SelcoGit/alt-abiv0-linux-i386-d/
if [ -z $AROS_ALT_ABI_V0 ]; then
   echo "You should have an ENV-Variable \"export AROS_ALT_ABI_V0=~/Desktop/SelcoGit/alt-abiv0-linux-i386-d/\" (points to an AROS alt-abiv0)"
   echo "Commit refused."
   exit 1
fi

# You should have an ENV-Variable AROS_CORE_LINUX_X86_64=~/Desktop/SelcoGit/core-linux-x86_64-d/
if [ -z $AROS_CORE_LINUX_X86_64 ]; then
   echo "You should have an ENV-Variable \"export AROS_CORE_LINUX_X86_64=~/Desktop/SelcoGit/core-linux-x86_64-d/\" (points to an AROS core-linux-x86_64-d)"
   echo "Commit refused."
   exit 1
fi

# You should have an ENV-Variable AROS_CORE_LINUX_X86_64=~/Desktop/SelcoGit/core-linux-x86_64-d/
if [ -z $NATURE3D_DIR ]; then
   echo "You should have an ENV-Variable \"export NATURE3D_DIR=/home/developer/Desktop/SelcoGit/3DNature/\" (points to the 3DNature dir)"
   echo "Commit refused."
   exit 1
fi

function CheckTools {
# Checks, if all the used tools are available
 TOOLS="git grep netstat awk sshpass ssh rsync montage eog compare m68k-amigaos-gcc i386-aros-gcc x86_64-aros-gcc"

   for TOOL in $TOOLS; do
      which $TOOL 1>/dev/null
      if [ $? -ne 0 ]; then
         echo "Tool $TOOL not installed. Please install!"
         echo "Commit refused."
         exit 1
      fi
   done
   echo "CheckTools successful."
}

WINUAEIP=""   # will be set automatically in CheckSshWinUAE

function CheckNoUTF8 {
FILE_LIST="$(git diff --cached --name-only)"

for FILE in $FILE_LIST; do
    if [ $(file "$FILE" | grep -c "UTF-8") -ne "0" ]; then
        echo "Local pre-commit hook"
        echo "Error: File $FILE is UTF-8 encoded. Change that to ISO 8859-1 for Amiga and try again!"
        echo "Commit refused."
	exit 1
    fi
done
}

function CheckSimpleCat {
# check WCS.cs (SimpleCat) is ISO-8859
file $NATURE3D_DIR/Amiga/WCS.cs | grep "ISO-8859"
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "Error: File $FILE is not ISO-8859 encoded. Change that to ISO 8859-1 for Amiga and try again!"
   echo "Commit refused."
   exit 1
fi
}

function CheckSshWinUAE {
#check if we can ssh to WinUAE
#We want to run test on WinUAE later below in this script after building all. Check ssh to WinUAE now and abort before wasting time on building all configurations
#  Virtual Box NAT bill be 10.0. xxx
WINUAEIP=$(netstat -rn | awk '/^[0-9]+/{ if($2!="0.0.0.0") {print $2;exit(0);}}') # shows line starting with an IP Address and Gataway != 0.0.0.0
sshpass -p amigarulez! ssh -p 22222 ich@"$WINUAEIP" 'Ram:'
if [ $? -ne 0 ]; then
   echo "ssh $WINUAEIP did not work, trying 0.0.0.0 ..."
   WINUAEIP=0.0.0.0  # try local host
   sshpass -p amigarulez! ssh -p 22222 ich@"$WINUAEIP" 'Ram:'
   if [ $? -ne 0 ]; then
      echo "Local pre-commit hook"
      echo "Cannot ssh to WinUAE. amigasshd -p22222 started?"
      echo "Commit aborted."
      exit 1
   fi
fi
echo "OK, WINUAEIP=$WINUAEIP"
}

function CheckSASC {
#check, if WCS is still compileable with SAS/C
cd $NATURE3D_DIR/Amiga/
./build_wcs_sasc.sh
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "build_wcs_sasc.sh failed!"
   echo "Commit refused."
   exit 1
fi
}

function BuildAllEclipse {
#check if all eclipse build configurations can be build
cd $NATURE3D_DIR/Amiga/
./make_all_configurations.sh
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "make_all_configurations.sh"
   echo "Commit refused."
   exit 1
fi
}

function TestConvertOnWinUAE68020 {
# Run tests on WinUAE
echo "------------------"
echo "| Test on WinUAE |"
echo "------------------"

if [ -z $WINUAEIP ]; then
   CheckSshWinUAE
fi

# ack is like grep but with output
# we need grep (ack) "All tests passed." at the end to get a return code
sshpass -p amigarulez! ssh -p 22222 ich@"$WINUAEIP" "vbox:SelcoGit/3DNature/amiga && stack 100000 && test_68020/wcs_test_68020" | ack --passthru  "All tests passed."
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "test_68020/wcs_test_68020 failed!"
   echo "Commit refused."
   exit 1
fi
}

############################################################################################################################################

function TestConvertOnArosI386 {
#Run Tests on AROS i386
echo "--------------------"
echo "| Test on AROS 386 |"
echo "--------------------"
# Samba does not work on AROS so far (first char of all names missing), so copy all files
# copy Amiga WCS-Install-Dir for automatic testing...
# You should have an ENV-Variable for that!  LINUX_WCS_DIR=/home/developer/Desktop/WCS/
rsync -avz $LINUX_WCS_DIR $AROS_ALT_ABI_V0/bin/linux-i386/AROS/WCS
# copy Build/Test-Files
mkdir -p $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga
rsync -avz $NATURE3D_DIR/Amiga/ $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/

# create an assign VBox: to be identical with WinUAE-Tests and create a user-startup that runs our tests and exits afterwards
echo "assign VBOX: Sys:VBox"                            > $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; BEGIN WCS"                                     >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCS: Sys:WCS"                            >>  $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCSFrames: WCS:WCSFRAMES"                 >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCSProjects: WCS:WCSProjects"             >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign locale: VBox:SelcoGit/3DNature/Amiga add" >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; END WCS"                                       >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";-------------------"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; run test tests"                                >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "stack 100000"                                    >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "cd VBox:SelcoGit/3DNature/Amiga"                 >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
# all stuff written to Debug: goes to the Linux console (stderr, i.e. use 2>&1)
echo "test_i386-aros/WCS_test_i386-aros > Debug:"      >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";-------------------"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";exit AROS when done"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "shutdown"                                        >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
# now fire up AROS and let it do the tests.

pushd . 
cd $AROS_ALT_ABI_V0/bin/linux-i386/AROS
Arch/linux/AROSBootstrap 2>&1 | ack --passthru  "All tests passed."
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "test_i386-aros/WCS_test_i386-aros failed!"
   echo "Commit refused."
   exit 1
fi
popd
}


############################################################################################################################################

function TestConvertOnArosX86_64 {
#Run Tests on AROS x86-64
echo "-----------------------"
echo "| Test on AROS x86-64 |"
echo "-----------------------"
# Samba does not work on AROS x86-64 so far at all, so copy all files
# copy Amiga WCS-Install-Dir for automatic testing...
# You should have an ENV-Variable for that!  LINUX_WCS_DIR=/home/developer/Desktop/WCS/
rsync -avz $LINUX_WCS_DIR $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/WCS
# copy Build/Test-Files
mkdir -p $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga
rsync -avz $NATURE3D_DIR/Amiga/ $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga

# create an assign VBox: to be identical with WinUAE-Tests and create a user-startup that runs our tests and exits afterwards
echo "assign VBOX: Sys:VBox"                             > $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; BEGIN WCS"                                      >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCS: Sys:WCS"                              >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCSFrames: WCS:WCSFRAMES"                  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCSProjects: WCS:WCSProjects"              >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign locale: VBox:SelcoGit/3DNature/Amiga add"  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; END WCS"                                        >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";-------------------"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; run test tests"                                 >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "stack 100000"                                     >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "cd VBox:SelcoGit/3DNature/Amiga"                  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
# all stuff written to Debug: goes to the Linux console (stderr, i.e. use 2>&1)
echo "test_x86_64-aros/WCS_test_x86_64-aros.unstripped > Debug:"   >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";-------------------"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";exit AROS when done"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "shutdown"                                         >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
# now fire up AROS and let it do the tests.

pushd . 
cd $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS
boot/linux/AROSBootstrap --config-debug=mungwall 2>&1 | ack --passthru  "All tests passed."
if [ $? -ne 0 ]; then
   echo "Local pre-commit hook"
   echo "test_x86_64-aros/WCS_test_x86_64-aros failed!"
   echo "Commit refused."
   exit 1
fi
popd
}


################################################################
################################################################
function RenderTest_Generic {
    local LABEL=$1
    local SSH_COMMAND="$2 7462847623"  # magic param
    local IMAGE_PREFIX=$3
    local MAX_PIXEL_DIFFER=$4

    if [ -z $WINUAEIP ]; then
       CheckSshWinUAE
    fi


    # Verzeichnis vorbereiten
    rm -rf $NATURE3D_DIR/Amiga/RenderTestImages
    mkdir -p $NATURE3D_DIR/Amiga/RenderTestImages

    # Remote-Ausfuehrung
    Error=0
    ErrorString=""
    sshpass -p amigarulez! ssh -p 22222 ich@"$WINUAEIP" "vbox:SelcoGit/3DNature/amiga && stack 100000 && $SSH_COMMAND"

    # Montage der Bilder
    montage \
        -label $LABEL $NATURE3D_DIR/Amiga/RenderTestImages/$(basename $2)_CanyonSet000 \
        -label $LABEL $NATURE3D_DIR/Amiga/RenderTestImages/$(basename $2)_RMNP000 \
        -label $LABEL $NATURE3D_DIR/Amiga/RenderTestImages/$(basename $2)_DemoFrame001 \
        -label $LABEL $NATURE3D_DIR/Amiga/RenderTestImages/$(basename $2)_WorldTest001 \
        -geometry 752x480 -tile 2x2 $IMAGE_PREFIX.jpg
    eog $IMAGE_PREFIX.jpg &

    # Fehlerueberpruefung fuer jede Datei
    for file in "RMNP000" "CanyonSet000" "DemoFrame001" "WorldTest001"
    do

      # Fuehre den compare-Befehl aus und speichere die Ausgabe in einer Variablen
#set -x
      difference=$(compare -metric AE -fuzz 6% test_files/reference/ref_wcs2.031_$file RenderTestImages/$file null: 2>&1)

      # Extrahiere die Differenz von der Ausgabe (da compare Fehlerausgaben als Rueckgabewerte sendet)
      # In diesem Fall wird die Differenz auf die Standardfehlerausgabe geschrieben, daher "2>&1".
      # Die Ausgabe ist eine Zahl (die Anzahl der unterschiedlichen Pixel).
      difference_value=$(echo "$difference" | awk '/^[0-9]+/{print $1}')
echo "differenz_value=$difference_value"
      # Vergleiche, ob die Differenz groesser als 10 ist
      if [ "$(echo "$difference_value > 0" | bc -l)" -ne 0 ]; then
echo "Diff zu gross"
        LastError=1
        Error=$(expr $Error + $LastError)

        if [ $LastError -ne 0 ]; then
            ErrorString="$ErrorString $file"
        fi
else
echo "Diff nicht groesser 10"
      fi
#set +x
    done

    # Fehlerbehandlung
    if [ $Error -ne 0 ]; then
        echo "Local pre-commit hook"
        echo "$SSH_COMMAND failed ($ErrorString)!"
#        echo "Commit refused."
         echo "ignored for now, test will move later."
#        exit 1
    fi
}

################################################################
function RenderTest_WinUAE_SASC {
    RenderTest_Generic "SAS/C" "WCS_68020_SASC" "BigSasC" "ref"
}

################################################################
function RenderTest_WinUAE_68020 {
    RenderTest_Generic "68020" "68020/WCS_68020" "Big68020" "ref"
}

################################################################
function RenderTest_WinUAE_68020_60 {
    RenderTest_Generic "68020_60" "68020-60/wcs_68020-60" "Big68020_60" "ref"
}

################################################################
function RenderTest_WinUAE_68040 {
    RenderTest_Generic "68040" "68040/wcs_68040" "Big68040" "ref"
}

################################################################
function RenderTest_WinUAE_68060 {
    RenderTest_Generic "68060" "68060/wcs_68060" "Big68060" "ref"
}

#######################################################################################
function RenderTest_Aros_I386 {
echo "----------------------------"
echo "| Render-Test on AROS i386 |"
echo "----------------------------"
# Samba does not work on AROS so far (first char of all names missing), so copy all files
# copy Amiga WCS-Install-Dir for automatic testing...
# You should have an ENV-Variable for that!  LINUX_WCS_DIR=/home/developer/Desktop/WCS/
rsync -avz $LINUX_WCS_DIR $AROS_ALT_ABI_V0/bin/linux-i386/AROS/WCS
# copy Build/Test-Files
mkdir -p $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga
rsync -avz $NATURE3D_DIR/Amiga/ $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/

# create an assign VBox: to be identical with WinUAE-Tests and create a user-startup that runs our tests and exits afterwards
echo "assign VBOX: Sys:VBox"                            > $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; BEGIN WCS"                                     >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCS: Sys:WCS"                             >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCSFrames: WCS:WCSFRAMES"                 >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign WCSProjects: WCS:WCSProjects"             >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "assign locale: VBox:SelcoGit/3DNature/Amiga add" >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; END WCS"                                       >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";-------------------"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "; run test tests"                                >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "stack 100000"                                    >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "cd VBox:SelcoGit/3DNature/Amiga"                 >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
# all stuff written to Debug: goes to the Linux console (stderr, i.e. use 2>&1)
echo "i386-aros/WCS_i386-aros.unstripped 7462847623 > Debug:"     >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";-------------------"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo ";exit AROS when done"                            >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
echo "shutdown"                                        >> $AROS_ALT_ABI_V0/bin/linux-i386/AROS/S/user-startup
# now fire up AROS and let it do the tests.

pushd . 
cd $AROS_ALT_ABI_V0/bin/linux-i386/AROS
Arch/linux/AROSBootstrap 2>&1 #| ack --passthru  "All tests passed."
#if [ $? -ne 0 ]; then
#   echo "Local pre-commit hook"
#   echo "test_i386-aros/WCS_test_i386-aros failed!"
#   echo "Commit refused."
#   exit 1
#fi
popd

# Montage der Bilder
montage \
        -label $LABEL i386-AROS $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_i386-aros.unstripped_CanyonSet000 \
        -label $LABEL i386-AROS $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_i386-aros.unstripped_RMNP000 \
        -label $LABEL i386-AROS $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_i386-aros.unstripped_DemoFrame001 \
        -label $LABEL i386-AROS $AROS_ALT_ABI_V0/bin/linux-i386/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_i386-aros.unstripped_WorldTest001 \
        -geometry 752x480 -tile 2x2 WCS_i386-aros.unstripped.jpg
eog WCS_i386-aros.unstripped.jpg &



}



function RenderTest_Aros_X86_64 {
#Run Render-Test on AROS x86-64
echo "------------------------------"
echo "| Render-Test on AROS x86-64 |"
echo "------------------------------"
# Samba does not work on AROS x86-64 so far at all, so copy all files
# copy Amiga WCS-Install-Dir for automatic testing...
# You should have an ENV-Variable for that!  LINUX_WCS_DIR=/home/developer/Desktop/WCS/
rsync -avz $LINUX_WCS_DIR $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/WCS
# copy Build/Test-Files
mkdir -p $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga
rsync -avz $NATURE3D_DIR/Amiga/ $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga

# create an assign VBox: to be identical with WinUAE-Tests and create a user-startup that runs our tests and exits afterwards
echo "assign VBOX: Sys:VBox"                             > $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; BEGIN WCS"                                      >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCS: Sys:WCS"                              >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCSFrames: WCS:WCSFRAMES"                  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign WCSProjects: WCS:WCSProjects"              >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "assign locale: VBox:SelcoGit/3DNature/Amiga add"  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; END WCS"                                        >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";-------------------"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "; run test tests"                                 >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "stack 100000"                                     >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "cd VBox:SelcoGit/3DNature/Amiga"                  >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
# all stuff written to Debug: goes to the Linux console (stderr, i.e. use 2>&1)
echo "x86_64-aros/WCS_x86_64-aros.unstripped 7462847623 > Debug:"      >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";-------------------"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo ";exit AROS when done"                             >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
echo "shutdown"                                         >> $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/S/user-startup
# now fire up AROS and let it do the tests.

pushd . 
cd $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS
boot/linux/AROSBootstrap -m640 --config-debug=mungwall 2>&1 #| ack --passthru  "All tests passed."
#if [ $? -ne 0 ]; then
#   echo "Local pre-commit hook"
#   echo "test_x86_64-aros/WCS_test_x86_64-aros failed!"
#   echo "Commit refused."
#   exit 1
#fi
popd

 Montage der Bilder
montage \
        -label $LABEL x86_64-AROS $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_x86_64-aros.unstripped_CanyonSet000 \
        -label $LABEL x86_64-AROS $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_x86_64-aros.unstripped_RMNP000 \
        -label $LABEL x86_64-AROS $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_x86_64-aros.unstripped_DemoFrame001 \
        -label $LABEL x86_64-AROS $AROS_CORE_LINUX_X86_64/bin/linux-x86_64/AROS/VBox/SelcoGit/3DNature/Amiga/RenderTestImages/WCS_x86_64-aros.unstripped_WorldTest001 \
        -geometry 752x480 -tile 2x2 WCS_x86_64-aros.unstripped.jpg
eog WCS_x86_64-aros.unstripped.jpg &

}


# Wenn Parameter uebergeben wurden, fuehre die angegebenen Funktionen aus
if [ "$#" -gt 0 ]; then
    for func in "$@"; do
        if type "$func" &>/dev/null; then
            $func
        else
            echo "Funktion '$func' existiert nicht!"
        fi
    done
else
    # Wenn keine Parameter uebergeben wurden, fuehre alle Funktionen aus
    CheckTools
    CheckNoUTF8
    CheckSimpleCat
    CheckSshWinUAE
    CheckSASC
    BuildAllEclipse
    TestConvertOnWinUAE68020
    TestConvertOnArosI386
    TestConvertOnArosX86_64
    RenderTest_WinUAE_SASC
    RenderTest_WinUAE_68020
    RenderTest_WinUAE_68020_60
    RenderTest_WinUAE_68040
    RenderTest_WinUAE_68060
    RenderTest_Aros_I386
    RenderTest_Aros_X86_64
fi
